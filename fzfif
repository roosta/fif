#!/usr/bin/env bash

# Copyright (C) 2020 Daniel Berg <mail@roosta.sh>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# ====================================

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

_find_in_files() {
  match=$(\rg \
            --smart-case \
            --color "always" \
            --line-number \
            --hidden \
            --no-heading . | \
            fzf -d ":" \
                --ansi \
                --nth "2.." \
                --preview-window=up \
                --with-nth "1,3.." \
                --preview="$CURRENT_DIR/preview.sh {}") &&

    linum=$(echo "$match" | cut -d':' -f2) &&
    file=$(echo "$match" | cut -d':' -f1) &&

    ${EDITOR:-vim} +"$linum" "$file"
}

_exit_if_unsupported() {
  local version version_only_digits supported_version supported_version_only_digits
  if hash fzf 2>/dev/null; then
    version=$(fzf --version | awk '{print $1}')
    version_only_digits=$(echo "$version" | tr -dC '[:digit:]')
    supported_version="0.18.0"
    supported_version_only_digits=$(echo "$supported_version" | tr -dC '[:digit:]')
    if [ "$version_only_digits" -lt "$supported_version_only_digits" ]; then
      echo "fzf-preview.sh: Unsupported fzf version ($version), upgrade to $supported_version or higher" >&2;
      exit 1;
    fi
  else
    echo "fzfif: fzf needs to be installed for this script to work" >&2; exit 1;
  fi
  command -v bat >/dev/null 2>&1 || { echo "fzfif: bat needs to be installed for this script to work" >&2; exit 1; }
}
main() {
  _exit_if_unsupported
  _find_in_files
}

main "$@"
